generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL") // uses connection pooling
}

model Profile {
    id                String  @id @default(uuid())
    userId            String  @unique
    name              String
    username          String? @unique
    bio               String? @db.Text
    imageUrl          String  @db.Text
    email             String  @db.Text
    lookingForFriends Boolean @default(false) // if true, user will be shown in the "Find Friends" section

    servers  Server[]
    members  Member[]
    channels Channel[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sentFriendRequests     FriendRequest[] @relation("SentRequests")
    receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")

    userProfiles   Friend[] @relation("UserProfiles")
    friendProfiles Friend[] @relation("FriendProfiles")

    userOne  Conversation[] @relation("UserOne")
    userTwo  Conversation[] @relation("UserTwo")
    Messages UserMessages[]

    @@index([userId])
    @@index([username])
}

model Server {
    id         String @id @default(uuid())
    name       String
    imageUrl   String @db.Text
    inviteCode String @unique

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    members  Member[]
    channels Channel[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([profileId])
}

enum MemberRole {
    ADMIN
    MODERATOR
    GUEST
}

model Member {
    id   String     @id @default(uuid())
    role MemberRole @default(GUEST)

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    serverId String
    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    messages Message[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([profileId])
    @@index([serverId])
}

enum ChannelType {
    TEXT
    AUDIO
    VIDEO
}

model Channel {
    id   String      @id @default(uuid())
    name String
    type ChannelType @default(TEXT)

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    serverId String
    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    messages Message[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([profileId])
    @@index([serverId])
}

model Message {
    id      String  @id @default(uuid())
    content String  @db.Text
    fileUrl String? @db.Text

    memberId String
    member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

    channelId String
    channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

    deleted Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([channelId])
    @@index([memberId])
}

model FriendRequest {
    id String @id @default(uuid())

    profileId String
    profile   Profile @relation(name: "SentRequests", fields: [profileId], references: [id], onDelete: Cascade)

    friendId String
    friend   Profile @relation(name: "ReceivedRequests", fields: [friendId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([profileId])
    @@index([friendId])
}

model Friend {
    id String @id @default(uuid())

    profileId String
    profile   Profile @relation(name: "UserProfiles", fields: [profileId], references: [id], onDelete: Cascade)

    friendId String
    friend   Profile @relation(name: "FriendProfiles", fields: [friendId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([profileId])
    @@index([friendId])
}

model UserMessages {
    id String @id @default(uuid())

    content String  @db.Text
    fileUrl String? @db.Text

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    delete Boolean @default(false)

    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    Conversation   Conversation? @relation(fields: [conversationId], references: [id])
    conversationId String?
}

model Conversation {
    id String @id @default(uuid())

    userOneId String
    userOne   Profile @relation("UserOne", fields: [userOneId], references: [id], onDelete: Cascade)

    userTwoId String
    userTwo   Profile @relation("UserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

    messages  UserMessages[]
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt

    @@index([userOneId])
    @@index([userTwoId])
}
